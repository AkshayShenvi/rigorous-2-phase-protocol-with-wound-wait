b1;     :Transaction 1: start
r1(Y);  :Transaction 1: acquire read lock on Y
w1(Y);  :Transaction 1: acquire write lock on Y
r1(Z);  :Transaction 1: acquire read lock on Z
b2;     :Transaction 2: start
r2(Y);  :Transaction 2: Requesting read lock on Y : wound wait : Block Transaction 2, add operation to wait list
b3;     :Transaction 3: start
r3(Z);  :Transaction 3: acquire read lock on Z
w1(Z);  :Transaction 1: Requesting write lock on Z: wound wait : Abort Transaction 3 and release locks on 'Z', acquire write lock on Z
r2(Y);  :Transaction 2: Requesting read lock on Y : wound wait : Block Transaction 2, add operation to wait list (from waitlist)
w2(Y);  :Transaction 2: waiting, added operation to waiting list
r2(X);  :Transaction 2: waiting, added operation to waiting list
e1;     :Transaction 1: end, release locks on 'Y' 'Z'
w2(Y);  :Transaction 2: acquire write lock on Y (from waitlist)
r2(X);  :Transaction 2: acquire read lock on X (from waitlist)
w3(Z);  :Transaction 3 is aborted
e3;     :Transaction 3 is aborted
w2(X);  :Transaction 2: acquire write lock on X
e2;     :Transaction 2: end, release locks on 'Y' 'X'

*number of output operations may be greater than number of input operations 
 because operations that are waiting are started once 
 the locks are acquired